name: Build, Test, and Deploy
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy:
        description: Deploy if tests successful
        required: true
        type: boolean
        default: false
permissions:
  contents: write
jobs:
  check-version-txt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify version.txt exists
        run: |
          if [ ! -f version.txt ]; then
            echo "version.txt is missing!"
            exit 1
          fi
          git tag "$(cat version.txt)"
          echo "Version: $(cat version.txt)"
  create-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: check-version-txt
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
      - name: Tag with the release version
        run: |
          VERSION=$(cat version.txt)
          echo "Version from file: $VERSION"

          # Check if tag exists
          if ! git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Creating new tag: $VERSION"
            git tag "$VERSION"
            git push origin "$VERSION"
          else
            echo "Tag $VERSION already exists"
          fi
  lint-format-and-static-code-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # we need to fetch all branches/history so we can grab openapi.json out of the main branch
          fetch-depth: 0
      # Cache pre-commit dependencies
      # we need docker to run the oasdiff CLI pre-commit hook
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python
        run: |
          PYTHON_VERSION="$(cat .python-version)"
          uv python install "$PYTHON_VERSION"
      - name: Install pre-commit
        run: |
          uv sync --only-group qa
      - name: Lint, Format, and other static code quality checks
        run: |
          /bin/bash -x run.sh lint:ci
  build-wheel-and-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python
        run: |
          PYTHON_VERSION="$(cat .python-version)"
          uv python install "$PYTHON_VERSION"
      - name: Build python package
        run: |
          /bin/bash -x run.sh build
      - name: Upload wheel and sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./dist/*
  execute-tests:
    needs:
      - build-wheel-and-sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Set up Python
        run: |
          PYTHON_VERSION="$(cat .python-version)"
          uv python install "$PYTHON_VERSION"
      - name: Download wheel and sdist
        uses: actions/download-artifact@v4
        with:
          name: wheel-and-sdist
          path: ./dist/
      - name: Install test dependencies
        run: |
          uv venv
          uv sync --no-install-project --only-group test
          uv pip install ./dist/*.whl
      - name: Run tests on wheel
        run: |
          /bin/bash -x run.sh test:ci
  # publish:
  #   needs:
  #     - execute-tests
  #     - build-wheel-and-sdist
  #     - lint-format-and-static-code-checks
  #     - check-version-txt
  #   runs-on: ubuntu-latest
  #   # if - this is a merge to main or push directly to the main branch
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.11
  #     - name: Download wheel and sdist
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: wheel-and-sdist
  #         path: ./dist/
  #     # - name: Deploy
  #     #   if: ${{ github.event.inputs.deploy == 'true' }}
  #     #   run: |
  #     #     # ...
  #     - name: Push tags
  #       run: |
  #         git tag $(cat version.txt)
  #         git push origin --tags
  # Print variables that are available to the workflow. This is useful for debugging and troubleshooting.
  # docs: https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log
  dump-contexts-to-log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      # - name: Dump strategy context
      #   run: echo '${{ toJSON(strategy) }}'
      # - name: Dump matrix context
      #   run: echo '${{ toJSON(matrix) }}'
      - name: Dump secrets
        run: echo '${{ toJSON(secrets) }}'
      - name: Dump vars
        run: echo '${{ toJSON(vars) }}'
