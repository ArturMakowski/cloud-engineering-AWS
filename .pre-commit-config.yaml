repos:
  # General purpose pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Checks for files that contain merge conflict strings
      - id: check-merge-conflict
      # Trims trailing whitespace, respecting Markdown line breaks
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      # Ensures files end with a newline
      - id: end-of-file-fixer
        exclude: ^openapi\.json$
      # Attempts to load all TOML files to verify syntax
      - id: check-toml
      # Attempts to load all YAML files to verify syntax
      - id: check-yaml
        args: ["--unsafe"]
      # Checks for symlinks that do not point to anything
      - id: check-symlinks
      # Prevents giant files from being committed
      - id: check-added-large-files
        args: ["--maxkb=500"]
      # Sorts entries in requirements.txt
      - id: requirements-txt-fixer
      # Prevents adding new git submodules
      - id: forbid-new-submodules
      # Prevents direct commits to specified branches (e.g., main)
      - id: no-commit-to-branch
        args: ["--branch=main"]
      # Detects private keys
      - id: detect-private-key
      # Checks that Python docstrings are first
      - id: check-docstring-first
      # Checks for debugger imports and py37+ `breakpoint()` calls
      - id: debug-statements
  # Python-specific hooks
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.9.5
    hooks:
      # Fast Python linter
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      # Python formatter
      - id: ruff-format
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: "v1.15.0"
    hooks:
      - id: mypy
        args: [--no-strict-optional, --ignore-missing-imports, --config-file=./pyproject.toml]
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.2
    hooks:
      # Finds common security issues in Python code
      - id: bandit
        args: ["-x", "tests", "--skip", "B101", "--skip", "B104"]
  - repo: https://github.com/PyCQA/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        args:
          - --toml-config=./pyproject.toml
        additional_dependencies:
          - radon
          - flake8-docstrings
          - Flake8-pyproject
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.19.1
    hooks:
      # Automatically upgrades Python syntax for newer versions
      - id: pyupgrade
        args: [--py38-plus]
  - repo: https://github.com/econchick/interrogate
    rev: 1.7.0
    hooks:
      # Checks for missing docstrings
      - id: interrogate
        args: [-vv, -i, --fail-under=75, --ignore-init-module]
  - repo: https://github.com/kynan/nbstripout
    rev: 0.8.1
    hooks:
      # Strips output from Jupyter and IPython notebooks
      - id: nbstripout
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.14
    hooks:
      # Finds unused code in Python programs
      - id: vulture
        args: ["src", "--min-confidence", "99"]
  # Docker-specific hooks
  - repo: https://github.com/IamTheFij/docker-pre-commit
    rev: v3.0.1
    hooks:
      # Checks that docker-compose files are valid
      - id: docker-compose-check
  - repo: https://github.com/pryorda/dockerfilelint-precommit-hooks
    rev: v0.1.0
    hooks:
      # Lints Dockerfiles
      - id: dockerfilelint
        args: [--ignore, missing_tag]
        stages: [pre-commit]
  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      # Detects secrets in your codebase
      - id: detect-secrets
  # Commit message and branch naming conventions
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.2.0
    hooks:
      # Checks if the commit message matches the commitizen format
      - id: commitizen
        stages: [commit-msg]
      # Checks if the current branch name matches the commitizen format
      - id: commitizen-branch
        stages: [pre-push]
  # GitHub Actions linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      # Lints GitHub Actions workflow files
      - id: actionlint
  # YAML formatting and linting
  - repo: https://github.com/google/yamlfmt
    rev: v0.15.0
    hooks:
      # Formats YAML files
      - id: yamlfmt
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      # Lints YAML files
      - id: yamllint
        args: [-d, "{extends: default, rules: {document-start: disable, truthy: disable, line-length: disable, comments-indentation: disable}}"]
  # Markdown-specific hooks
  - repo: https://github.com/thlorenz/doctoc
    rev: v2.2.0
    hooks:
      # Automatically generates table of contents for markdown files
      - id: doctoc
        args: ["--title", "## Table of Contents", "--maxlevel", "3"]
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.44.0
    hooks:
      # Lints README.md, disabling: first line should be a top-level header
      - id: markdownlint
        name: markdownlint (README.md)
        args: ["--disable", "MD041", "README.md"]
        files: README\.md
      # Lints all other markdown files
      - id: markdownlint
        name: markdownlint (other markdown files)
        files: \.md$
        exclude: README\.md
  - repo: https://github.com/astral-sh/uv-pre-commit
    # uv version.
    rev: 0.5.29
    hooks:
      - id: uv-lock
      - id: pip-compile
        args: [pyproject.toml, -o, requirements.txt]
  # Local hooks
  - repo: local
    hooks:
      # Fails if the OpenAPI schema is not up to date. This ensures that developers
      # always re-generate and commit the latest openapi.json file before they can pass the build.
      - id: generate-and-diff-openapi-schema
        name: Generate and Assert that OpenAPI Schema is up to date
        entry: |
          uv run python ./scripts/generate-openapi.py generate-and-diff --existing-spec ./openapi.json --output-spec ./openapi.json --fail-on-diff
        language: system
        # run this hook if openapi.json or any of the src/*.py files change (since those files generate openapi.json)
        files: ^openapi\.json$|^src/.*\.py$
        pass_filenames: false
        always_run: false
      # If any FastAPI code has changed, check that it does not introduce any breaking API
      # changes compared to the openapi.json on the main branch.
      - id: diff-openapi-schema-against-main
        name: Catch breaking API schema changes compared to main branch
        entry: |
          bash -c '
          set -ex;

          # generate the OpenAPI spec from the latest fastapi app code;
          python ./scripts/generate-openapi.py generate --output-spec openapi.json;

          # Determine which ref to use: remote if available, otherwise local
          if git show refs/heads/main:openapi.json > /dev/null 2>&1; then
            OPENAPI_REF="refs/heads/main:openapi.json"
          else
            OPENAPI_REF="origin/main:openapi.json"
          fi

          # Load the OpenAPI schema from the determined ref
          git show $OPENAPI_REF > ./openapi-main.json

          # set the openapi-main.json to be deleted when this hook finishes;
          trap "rm openapi-main.json" EXIT;

          # compare the recently generated OpenAPI schema to the one in main and fail if ;
          # the recently generated one would introduce breaking changes;
          docker run --rm \
            --volume $PWD:/data \
            tufin/oasdiff changelog \
              /data/openapi-main.json \
              /data/openapi.json \
              --fail-on ERR
          '
        language: system
        # run this hook if openapi.json or any of the src/*.py files change (since those files generate openapi.json)
        files: ^openapi\.json$|^src/.*\.py$
        pass_filenames: false
        always_run: false
        verbose: true
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
